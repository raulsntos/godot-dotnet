using System.Collections.Generic;
using Godot.BindingsGenerator.ApiDump;
using Godot.BindingsGenerator.Reflection;
using Godot.BindingsGenerator.Logging;

namespace Godot.BindingsGenerator;

internal sealed partial class BindingsData
{
    public GodotApiHeader Header { get; }

    private readonly TypeDB _typeDB = new();

    /// <summary>
    /// Collection of C# type information that was created from <see cref="GodotApi"/>.
    /// This type information will be used to generate C# types.
    /// </summary>
    public ICollection<GeneratedTypeData> Types => _generatedTypesByPath.Values;

    // Stores the types that will be generated.
    private readonly HashSet<TypeInfo> _generatedTypes = [];

    // Stores the types that will be generated so they can be retrieved by their path.
    private readonly Dictionary<string, GeneratedTypeData> _generatedTypesByPath = [];

    // Stores the inline arrays that will be generated by their length.
    private readonly Dictionary<int, TypeInfo> _inlineArrays = [];

    // Stores the singleton information by the engine name of the type that is marked as singleton.
    private readonly Dictionary<string, GodotSingletonInfo> _singletons = [];

    private readonly BindingsDataCollector[] _dataCollectors =
    [
        new GlobalConstantsBindingsDataCollector(),
        new BuiltInClassesBindingsDataCollector(),
        new EngineClassesBindingsDataCollector(),
        new NativeStructuresBindingsDataCollector(),
        new GlobalEnumsBindingsDataCollector(),
        new UtilityFunctionsBindingsDataCollector(),
        new VariadicGenericsBindingsDataCollector(),
    ];

    private BindingsData(GodotApiHeader header)
    {
        Header = header;
        RegisterKnownTypes();
    }

    /// <summary>
    /// Constructs a <see cref="BindingsData"/> instance and populate it with the
    /// necessary information from the given <paramref name="api"/> to generate
    /// the C# API.
    /// </summary>
    /// <param name="api">API information deSerialized from the JSON dump.</param>
    /// <param name="options">Options that configure the bindings generation.</param>
    /// <param name="logger">Logger that logs information messages, warnings, and errors.</param>
    /// <param name="targetDocs">Target docs to load from</param>
    /// <returns>A populated instance of <see cref="BindingsData"/>.</returns>
    public static BindingsData Create(GodotApi api, BindingsGeneratorOptions options, ILogger? logger = null)
    {
        logger ??= ConsoleLogger.Instance;

        var data = new BindingsData(api.Header);

        var context = new CollectionContext(data, api, options, logger);

        // First create all the TypeInfo instances, then populate them as a second step
        // so we can retrieve references to other TypeInfo instances when populating.
        data.InitializeTypes(context);
        data.PopulateTypes(context);

        return data;
    }

    private void InitializeTypes(CollectionContext context)
    {
        foreach (var collector in _dataCollectors)
        {
            collector.Initialize(context);
        }

        RegisterSingletons(context.Api);
    }

    private void PopulateTypes(CollectionContext context)
    {
        foreach (var collector in _dataCollectors)
        {
            collector.Populate(context);
        }
    }

    private void RegisterSingletons(GodotApi api)
    {
        foreach (var engineSingleton in api.Singletons)
        {
            _singletons[engineSingleton.Type] = engineSingleton;
        }
    }
}
