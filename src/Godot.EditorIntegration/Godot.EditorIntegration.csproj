<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net9.0</TargetFramework>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <IsTrimmable>true</IsTrimmable>
    <IsAotCompatible>true</IsAotCompatible>
    <EnableTrimAnalyzer>true</EnableTrimAnalyzer>
    <EnableSingleFileAnalyzer>true</EnableSingleFileAnalyzer>
    <EnableAotAnalyzer>true</EnableAotAnalyzer>
    <EnablePackageValidation>true</EnablePackageValidation>
  </PropertyGroup>

  <PropertyGroup>
    <IsPackable>true</IsPackable>
    <IncludeContentInPack>true</IncludeContentInPack>

    <!--
      We're packing DLLs into the content directories of the NuGet package.
      NuGet warns we may not want that since they won't be referenced;
      that is exactly what we do want here.
    -->
    <NoWarn>$(NoWarn);NU5100</NoWarn>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="..\Godot.Bindings\Godot.Bindings.csproj" />
    <ProjectReference Include="..\Godot.SourceGenerators\Godot.SourceGenerators.csproj" OutputItemType="Analyzer" ReferenceOutputAssembly="false" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\Godot.Common\Godot.Common.csproj" PrivateAssets="all" />
    <Content Include="$(OutputPath)\Godot.Common.dll" Pack="true" PackagePath="lib\$(TargetFramework)" />
  </ItemGroup>

  <Import Project="..\Godot.Common.CodeAnalysis\Godot.Common.CodeAnalysis.projitems" />

  <ItemGroup>
    <PackageReference Include="System.CommandLine" Version="$(SystemCommandLineVersion)" />
    <PackageReference Include="JetBrains.Rider.PathLocator" Version="$(JetBrainsRiderPathLocatorVersion)" />
    <PackageReference Include="Microsoft.Build" Version="$(MicrosoftBuildVersion)" ExcludeAssets="runtime" />
    <PackageReference Include="Microsoft.Build.Locator" Version="$(MicrosoftBuildLocatorVersion)" />
    <PackageReference Update="Microsoft.CodeAnalysis.CSharp.Workspaces" PrivateAssets="contentfiles;analyzers;build" />
    <PackageReference Include="Microsoft.CodeAnalysis.Workspaces.MSBuild" Version="$(MicrosoftCodeAnalysisWorkspacesMSBuildVersion)" />
    <PackageReference Include="Microsoft.VisualStudio.SolutionPersistence" Version="$(MicrosoftVisualStudioSolutionPersistenceVersion)" />
  </ItemGroup>

  <ItemGroup>
    <EmbeddedResource Update="Resources\Strings.resx">
      <ClassName>Godot.EditorIntegration.SR</ClassName>
      <EmitFormatMethods>true</EmitFormatMethods>
    </EmbeddedResource>
  </ItemGroup>

  <!--
    For the following packages we directly include the binary into this NuGet package because
    we don't want/need a separate NuGet package for it.
    PrivateAssets="all" is needed to prevent this reference from becoming a package reference
    in this package, as a workaround for https://github.com/NuGet/Home/issues/3891.
  -->
  <ItemGroup>
    <ProjectReference Include="..\Godot.PluginLoader\Godot.PluginLoader.csproj" PrivateAssets="all" ReferenceOutputAssembly="false">
      <IncludeOutputInThisPackage>true</IncludeOutputInThisPackage>
    </ProjectReference>
    <ProjectReference Include="..\Godot.EditorIntegration.MSBuildLogger\Godot.EditorIntegration.MSBuildLogger.csproj" PrivateAssets="all" ReferenceOutputAssembly="false">
      <IncludeOutputInThisPackage>true</IncludeOutputInThisPackage>
    </ProjectReference>
    <ProjectReference Include="..\Godot.UpgradeAssistant.Cli\Godot.UpgradeAssistant.Cli.csproj" PrivateAssets="all" ReferenceOutputAssembly="false">
      <IncludeOutputInThisPackage>true</IncludeOutputInThisPackage>
    </ProjectReference>
  </ItemGroup>

  <!-- Include certain project reference binaries into this package. -->
  <PropertyGroup>
    <TargetsForTfmSpecificBuildOutput>$(TargetsForTfmSpecificBuildOutput);GetAdditionalBinariesToPackage</TargetsForTfmSpecificBuildOutput>
  </PropertyGroup>
  <Target Name="GetAdditionalBinariesToPackage" DependsOnTargets="ResolveReferences">
    <ItemGroup>
      <BuildOutputInPackage Include="@(ReferencePath)" Condition="'%(ReferencePath.IncludeOutputInThisPackage)' == 'true'" />
    </ItemGroup>
  </Target>

  <!-- Deploy additional binaries to this package. -->
  <Target Name="DeployAdditionalBinaries" BeforeTargets="_GetPackageFiles;AssignTargetPaths" Condition="'$(DesignTimeBuild)' != 'true'">
    <ItemGroup>
      <_AdditionalProjectReferences Include="..\Godot.PluginLoader\Godot.PluginLoader.csproj">
        <ContentFolderName>Godot.PluginLoader</ContentFolderName>
      </_AdditionalProjectReferences>
      <_AdditionalProjectReferences Include="..\Godot.EditorIntegration.MSBuildLogger\Godot.EditorIntegration.MSBuildLogger.csproj">
        <ContentFolderName>Godot.EditorIntegration.MSBuildLogger</ContentFolderName>
      </_AdditionalProjectReferences>
      <_AdditionalProjectReferences Include="..\Godot.UpgradeAssistant.Cli\Godot.UpgradeAssistant.Cli.csproj">
        <ContentFolderName>Godot.UpgradeAssistant.Cli</ContentFolderName>
      </_AdditionalProjectReferences>
    </ItemGroup>

    <!-- We include Build as a target we invoke to work around https://github.com/dotnet/msbuild/issues/5433 -->
    <MSBuild Projects="@(_AdditionalProjectReferences)" Targets="Build;BuiltProjectOutputGroup;ReferenceCopyLocalPathsOutputGroup" Properties="UseAppHost=false">
      <Output TaskParameter="TargetOutputs" ItemName="AdditionalAssets" />
    </MSBuild>

    <ItemGroup>
      <!--
        We're setting both TargetPath and PackagePath here, the former when this is used in a regular build to deploy
        and the latter for when this called during pack. By putting the PackagePath in any/any, we only have to deploy
        this once rather than per TFM.
        Similarly, we set CopyToOutputDirectory for the regular build and PackageCopyToOutput for the packaging process.
      -->
      <Content Include="%(AdditionalAssets.Identity)"
        Condition="'%(AdditionalAssets.TargetPath)' != '' and '%(AdditionalAssets.Extension)' != '.xml'"
        TargetPath="$([System.IO.Path]::Combine('%(AdditionalAssets.ContentFolderName)', '%(AdditionalAssets.TargetPath)'))"
        PackagePath="$([System.IO.Path]::Combine('contentFiles', 'any', 'any', '%(AdditionalAssets.ContentFolderName)', '%(AdditionalAssets.TargetPath)'))"
        CopyToOutputDirectory="PreserveNewest"
        PackageCopyToOutput="true" />
    </ItemGroup>
  </Target>

</Project>
